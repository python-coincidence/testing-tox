#!/usr/bin/env python3
#
#  __init__.py
"""
Handy functions for testing tox plugins.
"""
#
#  Copyright Â© 2021 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
#  OR OTHER DEALINGS IN THE SOFTWARE.
#

# stdlib
import re
import sys
import sysconfig
from typing import Iterable

# 3rd party
import pytest
import tox.reporter  # type: ignore
from domdf_python_tools.paths import PathPlus, in_directory

__author__: str = "Dominic Davis-Foster"
__copyright__: str = "2021 Dominic Davis-Foster"
__license__: str = "MIT License"
__version__: str = "0.0.0"
__email__: str = "dominic@davis-foster.co.uk"

__all__ = ["prepare_stdout", "run_tox"]


def run_tox(args: Iterable[str], workdir: PathPlus) -> None:
	"""
	Run ``tox`` in ``workdir`` with the given arguments.

	:param args:
	:param workdir:
	"""

	tox.reporter._INSTANCE.tw._file = sys.stdout

	with pytest.raises(SystemExit), in_directory(workdir):
		tox.cmdline(list(args))


def prepare_stdout(stdout: str, toxinidir: PathPlus) -> str:
	"""
	Given the content of ``sys.stdout`` captured from a run of ``tox``,
	prepare the output for regression tests.

	This entails:

	* replacing the path ``toxindir`` with ``...``
	* removing deprecation warnings generated by ``packaging``
	* replacing the path to the python stdlib with ``/usr/lib/python3.x``

	:param stdout:
	:param toxinidir:
	"""  # noqa: D400

	stdout = stdout.replace(str(toxinidir), "...")
	stdout = re.sub(
			r"\.\.\.[\\/]\.tox[\\/].*[\\/]lib[\\/]python3\.\d[\\/]site-packages[\\/]pip[\\/]"
			r"_vendor[\\/]packaging[\\/]version\.py:\d*: "
			r"DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed "
			r"in the next major release, {2}(warnings\.warn\(|DeprecationWarning,)",
			'',
			stdout,
			)
	stdout = stdout.replace(
			sysconfig.get_path("stdlib"),
			f"/usr/lib/python{sys.version_info.major}.{sys.version_info.minor}",
			)

	return stdout
